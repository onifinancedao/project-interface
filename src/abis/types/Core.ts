/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Core {
  export type WinnerInfoStruct = {
    IDToken: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    evidence: PromiseOrValue<string>;
  };

  export type WinnerInfoStructOutput = [BigNumber, string, string, string] & {
    IDToken: BigNumber;
    owner: string;
    name: string;
    evidence: string;
  };
}

export interface CoreInterface extends utils.Interface {
  functions: {
    "activateEmergency()": FunctionFragment;
    "claimDate()": FunctionFragment;
    "claimDevReward()": FunctionFragment;
    "claimDevSecondReward()": FunctionFragment;
    "claimDevUtilityReward()": FunctionFragment;
    "claimableBalance(address)": FunctionFragment;
    "communityRaffle((uint256,address,string,string)[])": FunctionFragment;
    "currentStep()": FunctionFragment;
    "dev()": FunctionFragment;
    "devRewardDurationMinutes()": FunctionFragment;
    "devRewardEnd()": FunctionFragment;
    "devRewardForEachMinute()": FunctionFragment;
    "devRewardMinutesPendingToClaim()": FunctionFragment;
    "devRewardStart()": FunctionFragment;
    "devShacklesData()": FunctionFragment;
    "distribute()": FunctionFragment;
    "emergencyActive()": FunctionFragment;
    "emergencyWithdraw(uint256[])": FunctionFragment;
    "emergencyWithdrawalAmount()": FunctionFragment;
    "expand(uint256,uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "lastDevRewardClaimDate()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mintLimit()": FunctionFragment;
    "minutesRewarded()": FunctionFragment;
    "name()": FunctionFragment;
    "ofp()": FunctionFragment;
    "ongoingRaffle()": FunctionFragment;
    "pendingDevReward()": FunctionFragment;
    "pendingSecondReward()": FunctionFragment;
    "priceFor(uint256)": FunctionFragment;
    "raffleAmounts(uint256)": FunctionFragment;
    "raffleParticipantsNumber(uint256)": FunctionFragment;
    "raffleResult(uint256,uint256)": FunctionFragment;
    "raffleResults(uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "requestDevFinalReward()": FunctionFragment;
    "requestRandomWords()": FunctionFragment;
    "secondMinutesRewarded()": FunctionFragment;
    "secondRewardDurationMinutes()": FunctionFragment;
    "secondRewardEnd()": FunctionFragment;
    "secondRewardForEachMinute()": FunctionFragment;
    "secondRewardLastClaim()": FunctionFragment;
    "secondRewardMinutesPendingToClaim()": FunctionFragment;
    "secondRewardStart()": FunctionFragment;
    "selectTokens()": FunctionFragment;
    "selectedNextTokens()": FunctionFragment;
    "selectedTokens(uint256,uint256)": FunctionFragment;
    "sendProjectFunds()": FunctionFragment;
    "setTempLock(bool)": FunctionFragment;
    "startMinting()": FunctionFragment;
    "tempLock()": FunctionFragment;
    "timelock()": FunctionFragment;
    "tokenIdRewarded(uint256)": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "tokensDevRewarded()": FunctionFragment;
    "totalDevReward()": FunctionFragment;
    "totalProjectFunds()": FunctionFragment;
    "totalSecondReward()": FunctionFragment;
    "usdToken()": FunctionFragment;
    "utilityToken()": FunctionFragment;
    "utilityTokenAmount()": FunctionFragment;
    "vrfCallbackGasLimit()": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
    "vrfKeyHash()": FunctionFragment;
    "vrfNumWords()": FunctionFragment;
    "vrfRandomWords(uint256)": FunctionFragment;
    "vrfRequestConfirmations()": FunctionFragment;
    "vrfRequestId()": FunctionFragment;
    "vrfSubscriptionId()": FunctionFragment;
    "withdrawClaimableBalance(address,uint256)": FunctionFragment;
    "withdrawUtilityTokens(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergency"
      | "claimDate"
      | "claimDevReward"
      | "claimDevSecondReward"
      | "claimDevUtilityReward"
      | "claimableBalance"
      | "communityRaffle"
      | "currentStep"
      | "dev"
      | "devRewardDurationMinutes"
      | "devRewardEnd"
      | "devRewardForEachMinute"
      | "devRewardMinutesPendingToClaim"
      | "devRewardStart"
      | "devShacklesData"
      | "distribute"
      | "emergencyActive"
      | "emergencyWithdraw"
      | "emergencyWithdrawalAmount"
      | "expand"
      | "governor"
      | "lastDevRewardClaimDate"
      | "mint"
      | "mintLimit"
      | "minutesRewarded"
      | "name"
      | "ofp"
      | "ongoingRaffle"
      | "pendingDevReward"
      | "pendingSecondReward"
      | "priceFor"
      | "raffleAmounts"
      | "raffleParticipantsNumber"
      | "raffleResult"
      | "raffleResults"
      | "rawFulfillRandomWords"
      | "requestDevFinalReward"
      | "requestRandomWords"
      | "secondMinutesRewarded"
      | "secondRewardDurationMinutes"
      | "secondRewardEnd"
      | "secondRewardForEachMinute"
      | "secondRewardLastClaim"
      | "secondRewardMinutesPendingToClaim"
      | "secondRewardStart"
      | "selectTokens"
      | "selectedNextTokens"
      | "selectedTokens"
      | "sendProjectFunds"
      | "setTempLock"
      | "startMinting"
      | "tempLock"
      | "timelock"
      | "tokenIdRewarded"
      | "tokenPrice"
      | "tokensDevRewarded"
      | "totalDevReward"
      | "totalProjectFunds"
      | "totalSecondReward"
      | "usdToken"
      | "utilityToken"
      | "utilityTokenAmount"
      | "vrfCallbackGasLimit"
      | "vrfCoordinator"
      | "vrfKeyHash"
      | "vrfNumWords"
      | "vrfRandomWords"
      | "vrfRequestConfirmations"
      | "vrfRequestId"
      | "vrfSubscriptionId"
      | "withdrawClaimableBalance"
      | "withdrawUtilityTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimDevReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevSecondReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimDevUtilityReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "communityRaffle",
    values: [Core.WinnerInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStep",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devRewardDurationMinutes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devRewardEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devRewardForEachMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devRewardMinutesPendingToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devRewardStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devShacklesData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expand",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastDevRewardClaimDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "mintLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minutesRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "ofp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ongoingRaffle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDevReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSecondReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleAmounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleParticipantsNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleResults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDevFinalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondMinutesRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardDurationMinutes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardForEachMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardLastClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardMinutesPendingToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondRewardStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectedNextTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectedTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendProjectFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTempLock",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "startMinting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tempLock", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdRewarded",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensDevRewarded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDevReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProjectFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSecondReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "utilityToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "utilityTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCallbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfKeyHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfNumWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRandomWords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawClaimableBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUtilityTokens",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDevReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevSecondReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimDevUtilityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devRewardDurationMinutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRewardEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRewardForEachMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRewardMinutesPendingToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devRewardStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devShacklesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expand", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDevRewardClaimDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minutesRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ofp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ongoingRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDevReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSecondReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleParticipantsNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDevFinalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondMinutesRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardDurationMinutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardForEachMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardLastClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardMinutesPendingToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondRewardStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedNextTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendProjectFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTempLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tempLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensDevRewarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDevReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProjectFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSecondReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "utilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilityTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrfKeyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfNumWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClaimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUtilityTokens",
    data: BytesLike
  ): Result;

  events: {
    "AddClaimableBalance(address,uint256)": EventFragment;
    "EmergencyWithdrawal(address,uint256)": EventFragment;
    "Step(uint256)": EventFragment;
    "WithdrawClaimableBalance(address,uint256)": EventFragment;
    "WithdrawUtilityToken(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddClaimableBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Step"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawClaimableBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawUtilityToken"): EventFragment;
}

export interface AddClaimableBalanceEventObject {
  to: string;
  amount: BigNumber;
}
export type AddClaimableBalanceEvent = TypedEvent<
  [string, BigNumber],
  AddClaimableBalanceEventObject
>;

export type AddClaimableBalanceEventFilter =
  TypedEventFilter<AddClaimableBalanceEvent>;

export interface EmergencyWithdrawalEventObject {
  to: string;
  amount: BigNumber;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface StepEventObject {
  currentStep: BigNumber;
}
export type StepEvent = TypedEvent<[BigNumber], StepEventObject>;

export type StepEventFilter = TypedEventFilter<StepEvent>;

export interface WithdrawClaimableBalanceEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawClaimableBalanceEvent = TypedEvent<
  [string, BigNumber],
  WithdrawClaimableBalanceEventObject
>;

export type WithdrawClaimableBalanceEventFilter =
  TypedEventFilter<WithdrawClaimableBalanceEvent>;

export interface WithdrawUtilityTokenEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawUtilityTokenEvent = TypedEvent<
  [string, BigNumber],
  WithdrawUtilityTokenEventObject
>;

export type WithdrawUtilityTokenEventFilter =
  TypedEventFilter<WithdrawUtilityTokenEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimDevReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDevSecondReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimDevUtilityReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    communityRaffle(
      selectedCommunityMembers: Core.WinnerInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    devRewardDurationMinutes(overrides?: CallOverrides): Promise<[BigNumber]>;

    devRewardEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    devRewardForEachMinute(overrides?: CallOverrides): Promise<[BigNumber]>;

    devRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingMinutes: BigNumber }>;

    devRewardStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    devShacklesData(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { shackles: boolean; message: string }>;

    distribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyActive(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    expand(
      randomValue: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    lastDevRewardClaimDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minutesRewarded(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ofp(overrides?: CallOverrides): Promise<[string]>;

    ongoingRaffle(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDevReward(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
    >;

    pendingSecondReward(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
    >;

    priceFor(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    raffleAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    raffleParticipantsNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    raffleResult(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        IDToken: BigNumber;
        owner: string;
        name: string;
        evidence: string;
      }
    >;

    raffleResults(
      raffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Core.WinnerInfoStructOutput[]]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestDevFinalReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    secondMinutesRewarded(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondRewardDurationMinutes(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    secondRewardEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondRewardForEachMinute(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondRewardLastClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingMinutes: BigNumber }>;

    secondRewardStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    selectTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selectedNextTokens(overrides?: CallOverrides): Promise<[boolean]>;

    selectedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sendProjectFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTempLock(
      temp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startMinting(overrides?: CallOverrides): Promise<[BigNumber]>;

    tempLock(overrides?: CallOverrides): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    tokenIdRewarded(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensDevRewarded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDevReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalProjectFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSecondReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;

    utilityToken(overrides?: CallOverrides): Promise<[string]>;

    utilityTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vrfCallbackGasLimit(overrides?: CallOverrides): Promise<[number]>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;

    vrfKeyHash(overrides?: CallOverrides): Promise<[string]>;

    vrfNumWords(overrides?: CallOverrides): Promise<[number]>;

    vrfRandomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vrfRequestConfirmations(overrides?: CallOverrides): Promise<[number]>;

    vrfRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    vrfSubscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawClaimableBalance(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUtilityTokens(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateEmergency(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDate(overrides?: CallOverrides): Promise<BigNumber>;

  claimDevReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDevSecondReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimDevUtilityReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  communityRaffle(
    selectedCommunityMembers: Core.WinnerInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentStep(overrides?: CallOverrides): Promise<BigNumber>;

  dev(overrides?: CallOverrides): Promise<string>;

  devRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

  devRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

  devRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

  devRewardMinutesPendingToClaim(overrides?: CallOverrides): Promise<BigNumber>;

  devRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

  devShacklesData(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { shackles: boolean; message: string }>;

  distribute(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyActive(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    tokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  expand(
    randomValue: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  governor(overrides?: CallOverrides): Promise<string>;

  lastDevRewardClaimDate(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

  minutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ofp(overrides?: CallOverrides): Promise<string>;

  ongoingRaffle(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDevReward(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
  >;

  pendingSecondReward(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
  >;

  priceFor(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  raffleAmounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  raffleParticipantsNumber(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  raffleResult(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      IDToken: BigNumber;
      owner: string;
      name: string;
      evidence: string;
    }
  >;

  raffleResults(
    raffle: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Core.WinnerInfoStructOutput[]>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestDevFinalReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRandomWords(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  secondMinutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

  secondRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

  secondRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

  secondRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

  secondRewardLastClaim(overrides?: CallOverrides): Promise<BigNumber>;

  secondRewardMinutesPendingToClaim(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  secondRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

  selectTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selectedNextTokens(overrides?: CallOverrides): Promise<boolean>;

  selectedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sendProjectFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTempLock(
    temp: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startMinting(overrides?: CallOverrides): Promise<BigNumber>;

  tempLock(overrides?: CallOverrides): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<string>;

  tokenIdRewarded(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tokensDevRewarded(overrides?: CallOverrides): Promise<BigNumber>;

  totalDevReward(overrides?: CallOverrides): Promise<BigNumber>;

  totalProjectFunds(overrides?: CallOverrides): Promise<BigNumber>;

  totalSecondReward(overrides?: CallOverrides): Promise<BigNumber>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  utilityToken(overrides?: CallOverrides): Promise<string>;

  utilityTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vrfCallbackGasLimit(overrides?: CallOverrides): Promise<number>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  vrfKeyHash(overrides?: CallOverrides): Promise<string>;

  vrfNumWords(overrides?: CallOverrides): Promise<number>;

  vrfRandomWords(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vrfRequestConfirmations(overrides?: CallOverrides): Promise<number>;

  vrfRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  vrfSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawClaimableBalance(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUtilityTokens(
    tokens: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateEmergency(overrides?: CallOverrides): Promise<void>;

    claimDate(overrides?: CallOverrides): Promise<BigNumber>;

    claimDevReward(overrides?: CallOverrides): Promise<void>;

    claimDevSecondReward(overrides?: CallOverrides): Promise<void>;

    claimDevUtilityReward(overrides?: CallOverrides): Promise<void>;

    claimableBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityRaffle(
      selectedCommunityMembers: Core.WinnerInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentStep(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<string>;

    devRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

    devShacklesData(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { shackles: boolean; message: string }>;

    distribute(overrides?: CallOverrides): Promise<void>;

    emergencyActive(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    expand(
      randomValue: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    governor(overrides?: CallOverrides): Promise<string>;

    lastDevRewardClaimDate(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ofp(overrides?: CallOverrides): Promise<string>;

    ongoingRaffle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDevReward(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
    >;

    pendingSecondReward(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; pendingMinutes: BigNumber }
    >;

    priceFor(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleParticipantsNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleResult(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        IDToken: BigNumber;
        owner: string;
        name: string;
        evidence: string;
      }
    >;

    raffleResults(
      raffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Core.WinnerInfoStructOutput[]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestDevFinalReward(overrides?: CallOverrides): Promise<void>;

    requestRandomWords(overrides?: CallOverrides): Promise<void>;

    secondMinutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardLastClaim(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secondRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

    selectTokens(overrides?: CallOverrides): Promise<void>;

    selectedNextTokens(overrides?: CallOverrides): Promise<boolean>;

    selectedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendProjectFunds(overrides?: CallOverrides): Promise<void>;

    setTempLock(
      temp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    startMinting(overrides?: CallOverrides): Promise<BigNumber>;

    tempLock(overrides?: CallOverrides): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<string>;

    tokenIdRewarded(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokensDevRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    totalDevReward(overrides?: CallOverrides): Promise<BigNumber>;

    totalProjectFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalSecondReward(overrides?: CallOverrides): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<string>;

    utilityToken(overrides?: CallOverrides): Promise<string>;

    utilityTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCallbackGasLimit(overrides?: CallOverrides): Promise<number>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;

    vrfKeyHash(overrides?: CallOverrides): Promise<string>;

    vrfNumWords(overrides?: CallOverrides): Promise<number>;

    vrfRandomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrfRequestConfirmations(overrides?: CallOverrides): Promise<number>;

    vrfRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    vrfSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawClaimableBalance(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUtilityTokens(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddClaimableBalance(address,uint256)"(
      to?: null,
      amount?: null
    ): AddClaimableBalanceEventFilter;
    AddClaimableBalance(
      to?: null,
      amount?: null
    ): AddClaimableBalanceEventFilter;

    "EmergencyWithdrawal(address,uint256)"(
      to?: null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      to?: null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;

    "Step(uint256)"(currentStep?: null): StepEventFilter;
    Step(currentStep?: null): StepEventFilter;

    "WithdrawClaimableBalance(address,uint256)"(
      to?: null,
      amount?: null
    ): WithdrawClaimableBalanceEventFilter;
    WithdrawClaimableBalance(
      to?: null,
      amount?: null
    ): WithdrawClaimableBalanceEventFilter;

    "WithdrawUtilityToken(address,uint256)"(
      to?: null,
      amount?: null
    ): WithdrawUtilityTokenEventFilter;
    WithdrawUtilityToken(
      to?: null,
      amount?: null
    ): WithdrawUtilityTokenEventFilter;
  };

  estimateGas: {
    activateEmergency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDate(overrides?: CallOverrides): Promise<BigNumber>;

    claimDevReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDevSecondReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimDevUtilityReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityRaffle(
      selectedCommunityMembers: Core.WinnerInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentStep(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

    devRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

    devShacklesData(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyActive(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    expand(
      randomValue: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    lastDevRewardClaimDate(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintLimit(overrides?: CallOverrides): Promise<BigNumber>;

    minutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ofp(overrides?: CallOverrides): Promise<BigNumber>;

    ongoingRaffle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDevReward(overrides?: CallOverrides): Promise<BigNumber>;

    pendingSecondReward(overrides?: CallOverrides): Promise<BigNumber>;

    priceFor(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleParticipantsNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleResult(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    raffleResults(
      raffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestDevFinalReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    secondMinutesRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardDurationMinutes(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardEnd(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardForEachMinute(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardLastClaim(overrides?: CallOverrides): Promise<BigNumber>;

    secondRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secondRewardStart(overrides?: CallOverrides): Promise<BigNumber>;

    selectTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selectedNextTokens(overrides?: CallOverrides): Promise<BigNumber>;

    selectedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendProjectFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTempLock(
      temp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startMinting(overrides?: CallOverrides): Promise<BigNumber>;

    tempLock(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdRewarded(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokensDevRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    totalDevReward(overrides?: CallOverrides): Promise<BigNumber>;

    totalProjectFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalSecondReward(overrides?: CallOverrides): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;

    utilityToken(overrides?: CallOverrides): Promise<BigNumber>;

    utilityTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCallbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrfKeyHash(overrides?: CallOverrides): Promise<BigNumber>;

    vrfNumWords(overrides?: CallOverrides): Promise<BigNumber>;

    vrfRandomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vrfRequestConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    vrfRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    vrfSubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawClaimableBalance(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUtilityTokens(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergency(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimDevReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDevSecondReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimDevUtilityReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityRaffle(
      selectedCommunityMembers: Core.WinnerInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devRewardDurationMinutes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devRewardEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devRewardForEachMinute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devRewardStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devShacklesData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expand(
      randomValue: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDevRewardClaimDate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minutesRewarded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ofp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ongoingRaffle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDevReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingSecondReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFor(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleParticipantsNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleResult(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raffleResults(
      raffle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestDevFinalReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    secondMinutesRewarded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondRewardDurationMinutes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondRewardEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondRewardForEachMinute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondRewardLastClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondRewardMinutesPendingToClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secondRewardStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selectTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selectedNextTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selectedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendProjectFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTempLock(
      temp: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startMinting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tempLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdRewarded(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensDevRewarded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDevReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalProjectFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSecondReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    utilityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    utilityTokenAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfCallbackGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfKeyHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfNumWords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfRandomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfRequestConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrfRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfSubscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawClaimableBalance(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUtilityTokens(
      tokens: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
